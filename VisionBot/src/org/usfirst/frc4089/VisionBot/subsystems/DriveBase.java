// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.VisionBot.subsystems;

import org.usfirst.frc4089.VisionBot.RobotMap;
import org.usfirst.frc4089.VisionBot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.networktables.NetworkTable;
import java.util.*;

/**
 *
 */
public class DriveBase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private static final double kAngleSetpoint = 0.0;
	private static final double kP = 0.008; // propotional turning constant
	private static final double kD = 0.0003; // propotional turning constant
	private static final double kI = 0.00001; // propotional turning constant
    
    private double mError = 0.0;
    private double mLastError = 0.0;
    private double mAcumError = 0.0;
    private static final double kMaxAcum = 100;
    private int mDebugCount = 0;
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new UserDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }

    @Override
    public void periodic() {
    }

    public void Drive(Joystick driveJoystick) {
    	double y = driveJoystick.getRawAxis(1);
    	double x = driveJoystick.getRawAxis(0);
    	
    	if(true != driveJoystick.getRawButton(4))
    	{
        	if(true == driveJoystick.getRawButton(1))
        	{
        		y = y/5;
        		x = x/5;
        	}
        	else
        	{
        		y = y/2.5;
        		x = x/2.8;
        	}
    	}
    	Drive(y,x);
    }	
    
    public void Drive(double y, double x) {

    	// IF we are turning, turn off the gyro
    	if(Math.abs(x)>0.2)
    	{
    		RawDrive(y,x);
    		mAcumError = 0;
    	}
    	else
    	{
        	double rate = RobotMap.gyro.getRate();
        	RobotMap.netTable.putNumber("gyroRate", rate);

        	mError = (kAngleSetpoint - rate);
        	mAcumError += mError;

        	mAcumError=Cap(mAcumError,kMaxAcum);        	
    		double turningValue = (mError * kP)+(mAcumError * kI) + (mLastError * kD);
    		turningValue=Cap(turningValue,1);
    		
    		mLastError = mError;

        	RobotMap.netTable.putNumber("error", mError);
        	RobotMap.netTable.putNumber("lastError", mLastError);
        	RobotMap.netTable.putNumber("acumError", mAcumError);    	
        	RobotMap.netTable.putNumber("speed", y);
        	RobotMap.netTable.putNumber("turning", turningValue);
    		    		
    		RawDrive(y,turningValue);
    	}
    }

    protected void RawDrive(double y, double x) {
    	double targetSpeedL = (y+x) * 4096 * 400.0 / 600; 
    	double targetSpeedR = (y-x) * 4096 * 400.0 / 600;
    	RobotMap.driveBaseLeftMain.set(ControlMode.Velocity, targetSpeedL);
    	RobotMap.driveBaseLeftSecond.set(ControlMode.Velocity, targetSpeedL);
    	RobotMap.driveBaseRightMain.set(ControlMode.Velocity, -1*targetSpeedR);
    	RobotMap.driveBaseRightSecond.set(ControlMode.Velocity, -1*targetSpeedR);
        
        /*
    	double targetSpeedL = (y+x); 
    	double targetSpeedR = (y-x);
    	RobotMap.driveBaseLeftMain.set(ControlMode.PercentOutput, targetSpeedL);
    	RobotMap.driveBaseLeftSecond.set(ControlMode.PercentOutput, targetSpeedL);
    	RobotMap.driveBaseRightMain.set(ControlMode.PercentOutput, -1*targetSpeedR);
    	RobotMap.driveBaseRightSecond.set(ControlMode.PercentOutput, -1*targetSpeedR);
    	*/  
    	
    	RobotMap.netTable.putNumber("lMotor", RobotMap.driveBaseLeftMain.getMotorOutputVoltage());
    	RobotMap.netTable.putNumber("rMotor", RobotMap.driveBaseRightMain.getMotorOutputVoltage());
    	RobotMap.netTable.putNumber("lEncoder", RobotMap.driveBaseLeftMain.getSelectedSensorPosition(0));
    	RobotMap.netTable.putNumber("rEncoder", RobotMap.driveBaseRightMain.getSelectedSensorPosition(0));

    	if(mDebugCount>20)
    	{
    		System.out.format("%d %d %d %d\n", 
    				RobotMap.driveBaseLeftMain.getSelectedSensorPosition(0),
    				RobotMap.driveBaseRightMain.getSelectedSensorPosition(0),
					RobotMap.driveBaseLeftMain.getSelectedSensorVelocity(0),
					RobotMap.driveBaseRightMain.getSelectedSensorVelocity(0));
    		
    		mDebugCount = 0;
    	}
    	mDebugCount++;
    }

    public void ClearEncoders()
    {
		RobotMap.driveBaseLeftMain.setSelectedSensorPosition(0, 0, 20);
		RobotMap.driveBaseRightMain.setSelectedSensorPosition(0, 0, 20);
    }
    
    /** @return 10% deadband */
	double Db(double axisVal) {
		if (axisVal < -0.10)
			return axisVal;
		if (axisVal > +0.10)
			return axisVal;
		return 0;
	}
	/** @param value to cap.
	 * @param peak positive double representing the maximum (peak) value.
	 * @return a capped value.
	 */
	double Cap(double value, double peak) {
		if (value < -peak)
			return -peak;
		if (value > +peak)
			return +peak;
		return value;
	}
}

