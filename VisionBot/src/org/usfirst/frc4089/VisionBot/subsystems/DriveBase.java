//----------------------------------------------------------------------------
//
//  $Workfile: DriveBase.java$
//
//  $Revision: X$
//
//  Project:    Stealth Libraries
//
//                            Copyright (c) 2018
//                               Cedarcrest High School
//                            All Rights Reserved
//
//  Modification History:
//  $Log:
//  $
//
//----------------------------------------------------------------------------
package org.usfirst.frc4089.VisionBot.subsystems;

import org.usfirst.frc4089.VisionBot.RobotMap;
import org.usfirst.frc4089.VisionBot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.sensors.PigeonIMU;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Joystick;
import stealth_libraries.StealthMath;

import org.usfirst.frc4089.VisionBot.*;
import stealth_libraries.StopWatch;

//----------------------------------------------------------------------------
//Class Declarations
//----------------------------------------------------------------------------
//
//Class Name: DriveBase
//
//Purpose:
//  Handle getting us from here to there
//
//----------------------------------------------------------------------------
public class DriveBase extends Subsystem {
  //----------------------------------------------------------------------------
  //  Class Constants 
  //----------------------------------------------------------------------------
  static final double kPgain = 0.03; /* percent throttle per degree of error */
  static final double kDgain = 0.0004; /* percent throttle per angular velocity dps */
  static final double kMaxCorrectionRatio = 0.20; /* cap corrective turning throttle to 30 percent of forward throttle */
  static final double kSpeedGain = 0.05; // The ramp for the speed
  
  //----------------------------------------------------------------------------
  //  Class Attributes 
  //----------------------------------------------------------------------------
  double mTargetAngle = 0;
  boolean mSendJoystickCommands = true;   // send the joystick to the drive, we surpress this in auto
  double mCurrentAngle = 0.0;
  double mActualSpeed = 0.0;

  //--------------------------------------------------------------------
  // Purpose:
  //     Init the command
  //
  // Notes:
  //     None.
  //--------------------------------------------------------------------   
  @Override
  public void initDefaultCommand() {
    setDefaultCommand(new UserDrive());
  }

  //--------------------------------------------------------------------
  // Purpose:
  //     Calls from every tick
  //
  // Notes:
  //     None.
  //--------------------------------------------------------------------  
  @Override
  public void periodic() {
    // Do Nothing
  }

  //--------------------------------------------------------------------
  // Purpose:
  //     Sets if the joystick controls the drive
  //
  // Notes:
  //     None.
  //--------------------------------------------------------------------  
  public void SetJoystick(boolean joystick)
  {
    mSendJoystickCommands = joystick;
  }

  //--------------------------------------------------------------------
  // Purpose:
  //     Sets the target angle 
  //
  // Notes:
  //     Usually used in auto when we want to reset things
  //--------------------------------------------------------------------  
  public void SetTargetAngle(double targetAngle)
  {
    mTargetAngle = targetAngle;
  }
  
  //--------------------------------------------------------------------
  // Purpose:
  //     Drive using the joystick 
  //
  // Notes:
  //     none
  //--------------------------------------------------------------------  
  public void Drive(Joystick driveJoystick) {
    double y = driveJoystick.getRawAxis(1)*-1;
    double x = driveJoystick.getRawAxis(0)*-1;

    // Adjust for speed, check if the fast button is pushed
    if (true == driveJoystick.getRawButton(Constants.kFastButton)) {
      // Do Nothing
    } else {
      // Is the slow button pushed
      if (true == driveJoystick.getRawButton(Constants.kSlowButton)) {
        y *= Constants.kSlowSpeed;
        x *= Constants.kSlowSpeed;
      } else {
        y *= Constants.kNormalSpeed;
        x *= Constants.kNormalSpeed;
      }
    }
    if(true == mSendJoystickCommands)
    {
      Drive(y, x);
    }
  }

  //--------------------------------------------------------------------
  // Purpose:
  //     Drive the robot using throttle and turn 
  //
  // Notes:
  //     Usually used in auto when we want to reset things
  //--------------------------------------------------------------------  
  public void Drive(double speed, double turn) {
    PigeonIMU.FusionStatus fusionStatus = new PigeonIMU.FusionStatus();
    double [] xyz_dps = new double [3];
    RobotMap.pigeonIMU.getRawGyro(xyz_dps);
    RobotMap.pigeonIMU.getFusedHeading(fusionStatus);
    
    mCurrentAngle = fusionStatus.heading;
    double currentAngularRate = xyz_dps[2];
    double turnThrottle = turn;
    
    // IF we are turning, turn off the gyro
    if (Math.abs(turn) > 0.2) {
      RawDrive(speed/1.3, turn/1.3);
      mTargetAngle = mCurrentAngle;
    } else {
      if (Math.abs(speed) > 0.1) {
        double angleError = (mTargetAngle - mCurrentAngle);
        /* very simple Proportional and Derivative (PD) loop with a cap,
         * replace with favorite close loop strategy or leverage future Talon <=> Pigeon features. */
        turnThrottle = angleError * kPgain - (currentAngularRate) * kDgain;
        /* the max correction is the forward throttle times a scalar,
         * This can be done a number of ways but basically only apply small turning correction when we are moving slow
         * and larger correction the faster we move.  Otherwise you may need stiffer pgain at higher velocities. */
        double maxThrot = StealthMath.MaxCorrection(speed, kMaxCorrectionRatio);
        turnThrottle =  StealthMath.Cap(turnThrottle, maxThrot);
        
        RobotMap.netTable.putNumber("gyroRate", currentAngularRate);
        RobotMap.netTable.putNumber("angleError", angleError);
        RobotMap.netTable.putNumber("turnAdj", turnThrottle);
        
        RawDrive(speed,turnThrottle);
      }
      else
      {
        RawDrive(0, 0);
        mTargetAngle = mCurrentAngle;
      }
    }
  }

  protected void RawDrive(double speed, double turn) {
    
    // Ramp the speed
    if(mActualSpeed != speed)
    {
      if(mActualSpeed>speed)
      {
        mActualSpeed = Math.min(mActualSpeed+kSpeedGain, speed);
      }
      else
      {
        mActualSpeed = Math.max(mActualSpeed-kSpeedGain, speed);
      }
    }
    
    double targetSpeedL = (mActualSpeed - turn) * 4096 * .8;
    double targetSpeedR = (mActualSpeed + turn) * 4096 * .8;
    RobotMap.leftMotor1SpeedControler.set(ControlMode.Velocity, targetSpeedL);
    RobotMap.rightMotor1SpeedControler.set(ControlMode.Velocity, targetSpeedR);

    RobotMap.netTable.putNumber("lMotor", RobotMap.leftMotor1SpeedControler.getMotorOutputVoltage());
    RobotMap.netTable.putNumber("rMotor", RobotMap.rightMotor1SpeedControler.getMotorOutputVoltage());
    RobotMap.netTable.putNumber("lEncoder", RobotMap.leftEncoder.GetInches());
    RobotMap.netTable.putNumber("rEncoder", RobotMap.rightEncoder.GetInches());

    System.out.format("%6d %6d %6d %6d\n", 
        RobotMap.leftMotor1SpeedControler.getSelectedSensorPosition(0),
        RobotMap.rightMotor1SpeedControler.getSelectedSensorPosition(0),
        RobotMap.leftMotor1SpeedControler.getSelectedSensorVelocity(0),
        RobotMap.rightMotor1SpeedControler.getSelectedSensorVelocity(0));
    
    
    if(Robot.oi.joystick1.getRawButton(5))
    {
      RobotMap.leftMotor1SpeedControler.setSelectedSensorPosition(0, 0, 20);
      RobotMap.rightMotor1SpeedControler.setSelectedSensorPosition(0, 0, 20);
    }
    
    Navigation.getInstance().setNewPose(
        RobotMap.leftEncoder.GetInches(), 
        RobotMap.rightEncoder.GetInches(),
        mCurrentAngle);
  }

  public void ClearEncoders() {
    RobotMap.leftEncoder.Clear();
    RobotMap.rightEncoder.Clear();
  }
}
