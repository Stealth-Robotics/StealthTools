// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.VisionBot.subsystems;

import org.usfirst.frc4089.VisionBot.RobotMap;
import org.usfirst.frc4089.VisionBot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Joystick;

/**
 *
 */
public class DriveBase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftMain = RobotMap.driveBaseLeftMain;
    private final WPI_TalonSRX leftSecond = RobotMap.driveBaseLeftSecond;
    private final WPI_TalonSRX rightMain = RobotMap.driveBaseRightMain;
    private final WPI_TalonSRX rightSecond = RobotMap.driveBaseRightSecond;
    private final RobotDrive robotDrive41 = RobotMap.driveBaseRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private static final double kAngleSetpoint = 0.0;
	private static final double kP = 0.004; // propotional turning constant
	private static final double kD = 0.001; // propotional turning constant
	private static final double kI = 0.001; // propotional turning constant
    
    private long   mDisplayCount = 0;
    private double mError = 0.0;
    private double mLastError = 0.0;
    private double mAcumError = 0.0;
    private static final double kMaxAcum = 1000;
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    	setDefaultCommand(new UserDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    public void Drive(Joystick driveJoystick) {
    	double y = driveJoystick.getRawAxis(1);
    	double x = driveJoystick.getRawAxis(0)*-1;
    	
    	if(true != driveJoystick.getRawButton(4))
    	{
        	if(true == driveJoystick.getRawButton(1))
        	{
        		y = y/2.5;
        		x = x/2.8;
        	}
        	else
        	{
        		y = y/1.5;
        		x = x/1.8;
        	}
    	}
    	Drive(y,x);
    }	
    
    public void Drive(double y, double x) {

    	double rate = RobotMap.gyro.getRate()/2;
    	double angle = RobotMap.gyro.getAngle();
    	
    	mError = (kAngleSetpoint - rate);
    	mAcumError += mError;
    	
    	if(mAcumError>kMaxAcum)
    	{
    		mAcumError = kMaxAcum;
    	}
    	
    	if(mAcumError<(kMaxAcum*-1))
    	{
    		mAcumError = kMaxAcum*-1;
    	}
    	
		double turningValue = (mError * kP)+(mAcumError * kI) + (mLastError * kD);
   	
		mLastError = mError;
		
    	if(Math.abs(x)>0.2)
    	{
    		robotDrive41.arcadeDrive(y,x);
    		mAcumError = 0;
    	}
    	else
    	{
			// Invert the direction of the turn if we are going backwards
			if(y<0)
			{
				turningValue *= -1;
			}
			
			robotDrive41.drive(y, turningValue);
    	}
    	
    	//baseDrive.arcadeDrive(y, x);
        }
}

