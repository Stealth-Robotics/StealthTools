// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.VisionBot;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.sensors.PigeonIMU;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveBaseLeftMain;
    public static WPI_TalonSRX driveBaseLeftSecond;
    public static WPI_TalonSRX driveBaseRightMain;
    public static WPI_TalonSRX driveBaseRightSecond;
    //public static DifferentialDrive driveBaseRobotDrive41;
    //public static SpeedControllerGroup leftSpeed;
    //public static SpeedControllerGroup rightSpeed;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private static final double kVoltsPerDegreePerSecond = 0.0128;
	/* Talon SRX/ Victor SPX will supported multiple (cascaded) PID loops.  
	 * For now we just want the primary one.
	 */
	public static final int kPIDLoopIdx = 0;

	/*
	 * set to zero to skip waiting for confirmation, set to nonzero to wait
	 * and report to DS if action fails.
	 */
	public static final int kTimeoutMs = 10;
	public static MPU9250IMU mImu;
    public static GyroHelper gyro;
    public static PigeonIMU pigeonIMU;
    
    public static NetworkTable netTable;
    public static NetworkTable piTable;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseLeftMain = new WPI_TalonSRX(1);
        driveBaseLeftSecond = new WPI_TalonSRX(2);
        driveBaseRightMain = new WPI_TalonSRX(4);
        driveBaseRightSecond = new WPI_TalonSRX(3);
        
       // leftSpeed = new SpeedControllerGroup(driveBaseLeftMain, driveBaseLeftSecond);
       // rightSpeed = new SpeedControllerGroup(driveBaseRightMain, driveBaseRightSecond);

       // driveBaseRobotDrive41 = new DifferentialDrive(leftSpeed, rightSpeed);
       // driveBaseRobotDrive41.setSafetyEnabled(true);
       // driveBaseRobotDrive41.setExpiration(0.1);
       // driveBaseRobotDrive41.setMaxOutput(1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        mImu = new MPU9250IMU();
        mImu.initMPU9250();
        
        gyro = new GyroHelper();
        gyro.calibrate();
    
        pigeonIMU = new PigeonIMU(driveBaseRightSecond);
        pigeonIMU.setFusedHeading(0.0, 10);
                
        netTable = NetworkTable.getTable("FRCRobot");
        piTable = NetworkTable.getTable("piBlob0");
        
        SetUpTalon(driveBaseLeftMain);
        SetUpTalon(driveBaseLeftSecond);
        SetUpTalon(driveBaseRightMain);
        SetUpTalon(driveBaseRightSecond);
        
        SmartDashboard.putData("Left Main", driveBaseLeftMain);
        SmartDashboard.putData("Left Second", driveBaseLeftSecond);  
    }
    
    static void SetUpTalon(WPI_TalonSRX talon)
    {
        talon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, kTimeoutMs);
        talon.setSensorPhase(true);
        
        /* set the peak and nominal outputs, 12V means full */
        talon.configNominalOutputForward(0, kTimeoutMs);
        talon.configNominalOutputReverse(0, kTimeoutMs);
        talon.configPeakOutputForward(1, kTimeoutMs);
        talon.configPeakOutputReverse(-1, kTimeoutMs);
        
        /* set closed loop gains in slot0 */
        talon.config_kF(kPIDLoopIdx, 0.34, kTimeoutMs);
        talon.config_kP(kPIDLoopIdx, 0.2, kTimeoutMs);
        talon.config_kI(kPIDLoopIdx, 0, kTimeoutMs); 
        talon.config_kD(kPIDLoopIdx, 0, kTimeoutMs);  
        
        talon.setSafetyEnabled(true);
        talon.setExpiration(kTimeoutMs);
    }
    
}
