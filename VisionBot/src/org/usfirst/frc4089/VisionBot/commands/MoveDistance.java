// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4089.VisionBot.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4089.VisionBot.Robot;
import org.usfirst.frc4089.VisionBot.RobotMap;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import stealth_libraries.StopWatch;

/**
 *
 */
public class MoveDistance extends Command {

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
  double mDistance = 0.0;
  double mCurTarget = 0.0;
  StopWatch mForward = new StopWatch(5000);

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
  public MoveDistance() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    mDistance = 12.0;
  }

  public MoveDistance(int distance) {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    mDistance = distance;
  }

  // Called just before this Command runs the first time
  @Override
  protected void initialize() {
    mForward.reset();
    mCurTarget = mDistance + RobotMap.leftEncoder.GetInches();
  }

  // Called repeatedly when this Command is scheduled to run
  @Override
  protected void execute() {
    Robot.driveBase.Drive(-0.3, 0);
  }

  // Make this return true when this Command no longer needs to run execute()
  @Override
  protected boolean isFinished() {
    double curLocation = mDistance + RobotMap.leftEncoder.GetInches();
    System.out.print(mCurTarget);
    System.out.print(" ");
    System.out.println(curLocation);
    if ((curLocation > mCurTarget) || (true == mForward.isExpired())) {
      Robot.driveBase.Drive(0, 0);
      return true;
    }

    return false;
  }

  // Called once after isFinished returns true
  @Override
  protected void end() {
  }

  // Called when another command which requires one or more of the same
  // subsystems is scheduled to run
  @Override
  protected void interrupted() {
  }
}
