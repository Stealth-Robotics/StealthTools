// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.VisionBot.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4089.VisionBot.Robot;
import org.usfirst.frc4089.VisionBot.RobotMap;
import stealth_libraries.StopWatch;

/**
 *
 */
public class TurnToCamera extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	double mArea = -2.0;
	double mY = 2000;
	double mGoalArea = 1;
	StopWatch mTimeOut = new StopWatch(60000);
	boolean mTurnLeft = true;
	boolean mHaveSeenIT = false;
	
	private static final int kDontSeeIT = -4;
	private static final int kNotCenteredLeft = -3;
	private static final int kNotCenteredRight = -2;
	private static final int kNotBigEnough = -1;
	private static final int kRightWhereItShouldBe = 0;

	private static final double kSlowSpeed = 0.2;
	private static final double kFastSpeed = 0.3;
	private static final double kFastForwardSpeed = -0.6;
	private static final double kSlowForwardSpeed = -0.1;
		
    public TurnToCamera() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Allow us to turn the other way if we know it's shorter
    public TurnToCamera(boolean turnLeft) {
    	mTurnLeft = turnLeft;
    }
  
    // Set the size
    public TurnToCamera(double goalArea) {
    	mGoalArea = goalArea;
    }
  
    // Allow us to turn the other way if we know it's shorterand set the size
    public TurnToCamera(boolean turnLeft, double goalArea) {
    	mTurnLeft = turnLeft;
    	mGoalArea = goalArea;
    }
  
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	mHaveSeenIT = false;
    	mTimeOut.reset();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	// We want to get the values only once even though we are using them in 
    	// another funciton.  This is so that the values are the same in
    	// execture and isFinished
    	mArea =  RobotMap.piTable.getDouble("area", -2);
    	mY =  RobotMap.piTable.getDouble("y", -2000);

    	System.out.print(mY);
    	System.out.print(" ");
    	System.out.print(mArea);
    	System.out.print(" ");
    	System.out.println(mGoalArea);
    	
     	if((kDontSeeIT == foundCenter()) && (false == mHaveSeenIT))
    	{
        	System.out.println("Dont See It");
     		if(true == mTurnLeft)
     		{
     			Robot.driveBase.Drive(0, -1*kFastSpeed);
     		}
     		else
     		{
     			Robot.driveBase.Drive(0, kFastSpeed);
     		}
    	}
     	else
     	{
     		// We probably over shot it, go there over way.
     		if(kDontSeeIT == foundCenter())
     		{
         		if(true == mTurnLeft)
         		{
         			Robot.driveBase.Drive(0, kSlowSpeed);
         		}
         		else
         		{
         			Robot.driveBase.Drive(0, -1*kSlowSpeed);
         		}
     		}
     		else
     		{
	         	if((kNotCenteredLeft == foundCenter())||
	         	   (kNotCenteredRight == foundCenter()))
	        	{
	            	System.out.println("Not Centered");
	         		// go slower
	         		if(kNotCenteredLeft == foundCenter())
	         		{                                             
	         			Robot.driveBase.Drive(kSlowForwardSpeed, kSlowSpeed);            
	         		}                                             
	         		else                                          
	         		{
	         			Robot.driveBase.Drive(kSlowForwardSpeed, -1*kSlowSpeed);
	         		}
	        	}
	         	else
	         	{
	             	if(kNotBigEnough == foundCenter())
	            	{
	             		Robot.driveBase.Drive(kFastForwardSpeed,0);
	             	}
	             	else
	             	{
	             		// It's good or really really bad, either case stop them motors
	             		Robot.driveBase.Drive(0, 0);
	            	}
	         	}
     		}
     	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	if((kRightWhereItShouldBe == foundCenter()) || (true == mTimeOut.isExpired()))
		{
			return true;
		}

    	return false;
    }

    
    protected int foundCenter()
    {
    	// If we see a blob
    	if(mArea>0)
    	{
    		// IF we see it don't allow ther system to overrun it and go around a again
    		mHaveSeenIT = true;
    		
    		// and the center is between -10 and 10
    		if(Math.abs(mY)<10)
    		{
    			if(mArea > mGoalArea)
    			{
    				return kRightWhereItShouldBe;
    			}
    			
    			return kNotBigEnough;
    		}
    		
    		if(mY>0)
    		{
        		return kNotCenteredLeft;
    		}
    		return kNotCenteredRight;
    	}
    	
    	return kDontSeeIT;
    }
    
    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveBase.Drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
