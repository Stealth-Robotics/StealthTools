// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Test.commands;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4089.Test.Robot;
import org.usfirst.frc4089.Test.RobotMap;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;

/**
 *
 */
public class MoveForward extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private final int gain = -1200;
	private double dist;
	private double speed;
	private final TalonSRX leftTalonSRX = RobotMap.driveBaseLeft1;
	private final AnalogGyro gyro = RobotMap.driveBaseAnalogGyro1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public MoveForward(double distance, double speed) 
    {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	this.speed = speed;
    	dist = distance;
    	requires(Robot.driveBase);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() 
    {
    	//SmartDashboard.putData("Encoder Ticks", leftTalonSRX.getSelectedSensorPosition(0));
    	System.out.println("Ticks: " + leftTalonSRX.getSelectedSensorPosition(0));
    	System.out.println("Distance: " + (double)leftTalonSRX.getSelectedSensorPosition(0) / (4096 + gain) * 4 * Math.PI);
    	System.out.println("Angle: " + gyro.getAngle());
    	RobotMap.driveBaseRobotDrive.arcadeDrive(-speed, 0);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() 
    {
        return (double)leftTalonSRX.getSelectedSensorPosition(0) / (4096 + gain) * 4 * Math.PI > dist;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() 
    {
    	RobotMap.driveBaseRobotDrive.arcadeDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
